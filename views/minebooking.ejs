<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mine Booking</title>
    <link rel="stylesheet" href="style.css"/>
    <link rel="stylesheet" href="styles/minebooking.css"/>
</head>
<body>
    <%- include('partials/navbar.ejs') %>
    <div class="content">
        <h1 class="headline">Mine Bookninger:</h1>
    
        <ul id="listView">
            <!-- The list items will be populated dynamically here -->
            
        </ul>
    </div>

    <%- include('partials/footer.ejs') %>

    <!-- Include your client-side JavaScript logic -->
    <script>
        // Access the data passed from the server
        const data = <%- JSON.stringify(data) %>; 
        let Userfornavn = <%- JSON.stringify(user.Fornavn) %>;
        document.addEventListener('DOMContentLoaded', function() {
            const listView = document.getElementById('listView');
            
    
            // Function to format the date to 'søn 02. dec 2023' format
            function formatDate(dateString) {
                const date = new Date(dateString);
                const options = { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric' };
                return date.toLocaleDateString('da-DK', options);
            }
            let existingCards = [];
            const groupedBookings = {};
            // Check if data exists and is an array
            if (Array.isArray(data) && data.length > 0) {
                // Loop through the data and create card elements
                data.forEach(booking => {
                    const card = document.createElement('li');
                    card.classList.add('card'); // Add a class for card styling
    
                    const formattedDate = formatDate(booking.Dato);
                   if(booking.BookingType == "privat spil"){
                        if(booking.Bruger_Fornavn == <%- JSON.stringify(user.Fornavn) %>){
                            
                            //console.log(booking.Bruger_Fornavn, Userfornavn, booking.id);
                            card.innerHTML = `
                                <div class="card-content">
                                    <div class="card-content-info">
                                        <h3>Bookning:</h3>
                                        <p>Booknings Type: ${booking.Bane_Sport}, ${booking.Bane_Banetype}</p>
                                        <p>Bane Navn: ${booking.Bane_Navn}</p>
                                        <p>Adresse: ${booking.Bane_Adresse}</p>
                                        <p>Dato: ${formattedDate}</p>
                                        <p>Klokkeslæt: ${booking.Klokkeslæt.slice(0, 5)}</p>
                                        <p>Medspiller: ${booking.Medspillere_List}</p>
                                        <p>Adgangskode: ${booking.Bane_Kodeord}</p>
                                    </div>
                                    <div class="card-content-button">
                                        <button class="delete_button">Slet</button>
                                       
                                    </div>
                                </div>
                            `;
                        }else{
                            //console.log('invited', booking.id);
                            card.innerHTML = `
                                <div class="card-content">
                                    <div class="card-content-info">
                                        <h3>Bookning:</h3>
                                        <p style="margin-bottom: 5px;"><span style="text-decoration-line: underline;">Inviteret af:</span> ${booking.Bruger_Fornavn}</p>
                                        <p>Booknings Type: ${booking.Bane_Sport}, ${booking.Bane_Banetype}</p>
                                        <p>Bane Navn: ${booking.Bane_Navn}</p>
                                        <p>Adresse: ${booking.Bane_Adresse}</p>
                                        <p>Dato: ${formattedDate}</p>
                                        <p>Klokkeslæt: ${booking.Klokkeslæt.slice(0, 5)}</p>
                                        <p>Medspiller: ${booking.Medspillere_List}</p>
                                        <p>Adgangskode: ${booking.Bane_Kodeord}</p>
                                    </div>
                                    <div class="card-content-button">
                                        <button class="delete_button">Slet</button>
                                        
                                    </div>
                                </div>
                            `;
                        };
                    
                    }else{
                        existingCards.push({
                            "id": booking.id,
                            "BookingType": booking.BookingType,
                            "Bane_Navn": booking.Bane_Navn,
                            "Bane_Adresse": booking.Bane_Adresse,
                            "Bane_PostnummerogBy": booking.Bane_PostnummerogBy,
                            "Bane_Banetype": booking.Bane_Banetype,
                            "Bane_Sport": booking.Bane_Sport,
                            "Bane_Kodeord": booking.Bane_Kodeord,
                            "Bruger_Fornavn": booking.Bruger_Fornavn,
                            "Medspillere_List": booking.Medspillere_List,
                            "Gæst": booking.Gæst,
                            "Gentagene": booking.Gentagene,
                            "Dato": formattedDate,
                            "Klokkeslæt": booking.Klokkeslæt.slice(0, 5)
                        });
                        /* card.innerHTML = `
                            <div class="card-content">
                                <div class="card-content-info">
                                    <h3>Bookning:</h3>
                                    <h4>Hold: <span> ${booking.BookingType}</span></h4>
                                    <p>Booknings Type: ${booking.Bane_Sport}, ${booking.Bane_Banetype}</p>
                                    <p>Bane Navn: ${booking.Bane_Navn}</p>
                                    <p>Adresse: ${booking.Bane_Adresse}</p>
                                    <p>Dato: ${formattedDate}</p>
                                    <p>Klokkeslæt: ${booking.Klokkeslæt.slice(0, 5)}</p>
                                    <p>Medspiller: ${booking.Medspillere_List}</p>
                                    <p>Adgangskode: ${booking.Bane_Kodeord}</p>
                                </div>
                                <div class="card-content-button">
                                    <button class="delete_button">Slet</button>
                                    
                                </div>
                            </div>
                        `; */
                        return;
                        //continue;
                    };  
                    // Add click event to each card item (for demonstration purposes)
                    //card.addEventListener('click', function() {
                    //    // Customize the click action if needed
                    //    alert(`Clicked: ${booking.BookingType}`);
                    //});
                    // Add click event to each delete button

                    const deleteButton = card.querySelector('.delete_button');
                    //console.log('Delete Button:', deleteButton); //button is null
                    deleteButton.addEventListener('click', function() {
                        // Assuming booking.id is accessible here from the booking object

                        // Confirm with the user before deletion
                        const confirmation = confirm('Are you sure you want to delete this booking?');
                        if (confirmation) {
                            // Perform the deletion by sending a request to your server
                            const bookingId = booking.id; // Assuming booking.id is accessible here
                            fetch(`/delete-booking/${bookingId}`, {
                                method: 'DELETE', // Assuming your server endpoint accepts DELETE requests
                            })
                            .then(response => {
                                if (response.ok) {
                                    // The booking was deleted successfully
                                    // You may want to update the UI to reflect the deletion
                                    // For example, remove the card corresponding to the deleted booking from the DOM
                                    listView.removeChild(card); // Assuming 'card' refers to the element of the booking being deleted'
                                    console.log('Booking deleted successfully '/*+JSON.stringify(status.message)*/);  
                                                                     
                                } else {
                                    // Handle error cases if the deletion failed
                                    console.error('Failed to delete booking');
                                    console.log('Error from server:', JSON.stringify(data.error));
                                }
                            })
                            .catch(error => {
                                // Handle network errors or other exceptions
                                console.error('Error deleting booking:', error);
                            });
                        }
                    });

                    /* 
                    // Add click event to each edit button
                    const editButton = card.querySelector('.edit_button');
                    //console.log('Edit Button:', editButton); //button is null
                    editButton.addEventListener('click', function() {
                        
                        const bookingId = booking.id;
                        const foundBooking = data.find(item => item.id === bookingId);

                        if (foundBooking) {
                            console.log('Found booking:', foundBooking);

                        } else {
                            // The object with the given ID was not found in the 'data' array
                            console.log('Booking not found');
                        }


                    }); */
    
                    listView.appendChild(card);
                });
            } else {
                // Handle case when no data is available
                const li = document.createElement('li');
                li.textContent = 'No bookings available';
                listView.appendChild(li);
            }
            console.log("existingCards", existingCards);
            if(existingCards.length !== 0){
                existingCards.forEach(existingCard => {
                    const { id, Dato, ...rest } = existingCard;//Exclude id and Dato from comparison

                    // Create a key by combining the properties you want to compare (excluding id and Dato)
                    const key = JSON.stringify(rest);
                    if (!groupedBookings[key]) {
                        // If the key doesn't exist in the grouped bookings, create a new array
                        groupedBookings[key] = [];
                    }

                    // Push the current card to its respective group
                    groupedBookings[key].push(existingCard);

                });
                // Generate cards for each group
                for (const key in groupedBookings) {
                    const group = groupedBookings[key];

                    // Find the minimum and maximum Dato within the group
                    const dates = group.map(card => new Date(card.Dato));
                    const minDate = new Date(Math.min(...dates)).toISOString().split('T')[0];
                    const maxDate = new Date(Math.max(...dates)).toISOString().split('T')[0];

                    // Extract IDs for the 'id' attribute in the card content
                    const ids = group.map(card => card.id).join(',');

                    // Create a card with min and max dates
                    const card = document.createElement('li');
                    card.classList.add('card');

                    // Initialize the content HTML with minimum and maximum dates
                    let contentHTML = `
                        <div class="card-content">
                            <div class="card-content-info" id='${ids}'>
                                <h3>Bookning:</h3>
                                <h4>Hold: <span>${group[0].BookingType}</span></h4>
                                <p>Booknings Type: ${group[0].Bane_Sport}, ${group[0].Bane_Banetype}</p>
                                <p>Bane Navn: ${group[0].Bane_Navn}</p>
                                <p>Adresse: ${group[0].Bane_Adresse}</p>
                                <p>Dato: ${minDate} - ${maxDate}</p>
                                <p>Klokkeslæt: ${group[0].Klokkeslæt.slice(0, 5)}</p>
                                <p>Medspiller: ${group[0].Medspillere_List}</p>
                                <p>Adgangskode: ${group[0].Bane_Kodeord}</p>
                            </div>
                            <div class="card-content-button">
                                <button class="delete_button">Slet</button>
                            </div>
                        </div>
                    `;
                    
                    card.innerHTML = contentHTML;
                    const deleteButton = card.querySelector('.delete_button');
                    deleteButton.addEventListener('click', function() {
                        const confirmation = confirm('Are you sure you want to delete this booking?');
                        if (confirmation) {
                            const bookingId = ids; // Assuming booking.id is accessible here

                            console.log("bookingId", bookingId );   
        /* 
                            fetch(`/delete-booking/${bookingId}`, {
                                method: 'DELETE',
                            })
                            .then(response => {
                                if (response.ok) {
                                    listView.removeChild(card); 
                                    console.log('Booking deleted successfully ');                                
                                } else {
                                    // Handle error cases if the deletion failed
                                    console.error('Failed to delete booking');
                                    console.log('Error from server:', JSON.stringify(data.error));
                                }
                            })
                            .catch(error => {
                                // Handle network errors or other exceptions
                                console.error('Error deleting booking:', error);
                            });  */
                        }
                    });




                    listView.appendChild(card); 
                };
                
            }else{
                const li = document.createElement('li');
                li.textContent = 'No Hold bookings available';
                listView.appendChild(li);
            }



        });
    </script>
</body>
</html>


